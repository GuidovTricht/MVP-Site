@using Mvp.Feature.Forms.Models
@model Mvp.Feature.Forms.Models.Form

<section class="hero background-white">
    <div><h1>Form</h1></div>
    <div>
        <script type="text/javascript">
            function submitForm(e, form){
                e.preventDefault();
                console.log(form);

                fetch('@Model.ActionUrl', {
                    body: new FormData(form),
                    method: 'post',
                    credentials: 'include'
                });

            }
        </script>
        <form method="POST" onsubmit="submitForm(event, this)">
            <input type="hidden" id="@Model.AntiForgeryToken.Id" name="@Model.AntiForgeryToken.Name" value="@Model.AntiForgeryToken.Value" />
            <input type="hidden" id="@Model.FormItemId.Id" name="@Model.FormItemId.Name" value="@Model.FormItemId.Value" />
            <input type="hidden" id="@Model.PageItemId.Id" name="@Model.PageItemId.Name" value="@Model.PageItemId.Value" />
            <input type="hidden" id="@Model.FormSessionId.Id" name="@Model.FormSessionId.Name" value="@Model.FormSessionId.Value" />

            @foreach(FormField fieldObj in Model.Fields){
                @await Component.InvokeAsync("FormField", new { field = fieldObj as Mvp.Feature.Forms.Models.FormField })
            }
        </form>
    </div>
</section>